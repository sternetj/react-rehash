{
  // Place your react-rehash workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "work-loop": {
    "scope": "javascript",
    "prefix": "wl",
    "body": [
      "let nextUnitOfWork = null;\n",
      "function workLoop(deadline) {",
      "\twhile (nextUnitOfWork && !deadline.didTimeout) {",
      "\t\tnextUnitOfWork = performUnitOfWork(",
      "\t\t\tnextUnitOfWork",
      "\t\t);",
      "\t}\n",
      "\twindow.requestIdleCallback(workLoop);",
      "}\n",
      "window.requestIdleCallback(workLoop);\n",
      "function performUnitOfWork(nextUnitOfWork) {",
      "\t// TODO add dom node",
      "\t// TODO create new fibers",
      "\t// TODO return next unit of work",
      "}"
    ],
    "description": "Empty Work Loop"
  },
  "perform-unit-of-work": {
    "scope": "javascript",
    "prefix": ["unit-of-work", "uw", "uow"],
    "body": [
      "/**",
      "* @param {Fiber} fiber",
      "* @typedef {{",
      "*   type?: string",
      "*   dom?: HTMLElement,",
      "*   parent?: Fiber,",
      "*   child?: Fiber,",
      "*   sibling?: Fiber,",
      "*   props: {",
      "*     children: Fiber[]",
      "*   }",
      "* }} Fiber",
      "*/",
      "function performUnitOfWork(fiber) {",
      "\t// TODO add dom node",
      "\t// TODO create new fibers",
      "\t// TODO return next unit of work",
      "}"
    ],
    "description": "Empty Work Loop"
  },
  "reconcile-children": {
    "scope": "javascript",
    "prefix": ["rc"],
    "body": [
      "/** @param {Fiber} wipFiber",
      " * @param {Pick<Fiber, \"type\" | \"props\">[]} elements",
      " * */",
      "function reconcileChildren(wipFiber, elements) {",
      "",
      "}"
    ],
    "description": "Reconcile Children Func"
  },
  "counter-example": {
    "scope": "javascript",
    "prefix": ["ce", "counter"],
    "body": [
      "function Counter() {",
      "  const [currentCount, setCount] = Rehash.useState(1)",
      "  return (",
      "    <h1 onClick={() => setCount(current => current + 1)}>",
      "      Count: {currentCount}",
      "    </h1>",
      "  )",
      "}",
      "const element = <Counter />"
    ],
    "description": "Counter Example"
  },
  "update-dom": {
    "scope": "javascript",
    "prefix": ["updateDom"],
    "body": [
      "const isEvent = key => key.startsWith('on')",
      "const isProperty = key => key !== 'children' && !isEvent(key)",
      "const isNew = (prev, next) => key => prev[key] !== next[key]",
      "const isGone = (prev, next) => key => !(key in next)",
      "function updateDom(dom, prevProps, nextProps) {",
      "  // Remove old properties",
      "  Object.keys(prevProps)",
      "    .filter(isProperty)",
      "    .filter(isGone(prevProps, nextProps))",
      "    .forEach(name => {",
      "      dom[name] = ''",
      "    })",
      "",
      "  // Set new or changed properties",
      "  Object.keys(nextProps)",
      "    .filter(isProperty)",
      "    .filter(isNew(prevProps, nextProps))",
      "    .forEach(name => {",
      "      dom[name] = nextProps[name]",
      "    })",
      "",
      "  //Remove old or changed event listeners",
      "  Object.keys(prevProps)",
      "    .filter(isEvent)",
      "    .filter(",
      "      key =>",
      "        !(key in nextProps) ||",
      "        isNew(prevProps, nextProps)(key)",
      "    )",
      "    .forEach(name => {",
      "      const eventType = name",
      "        .toLowerCase()",
      "        .substring(2)",
      "      dom.removeEventListener(",
      "        eventType,",
      "        prevProps[name]",
      "      )",
      "    })",
      "",
      "  // Add event listeners",
      "  Object.keys(nextProps)",
      "    .filter(isEvent)",
      "    .filter(isNew(prevProps, nextProps))",
      "    .forEach(name => {",
      "      const eventType = name",
      "        .toLowerCase()",
      "        .substring(2)",
      "      dom.addEventListener(",
      "        eventType,",
      "        nextProps[name]",
      "      )",
      "    })",
      "}"
    ],
    "description": "Update Dom Function"
  }
}
