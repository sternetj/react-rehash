{
  // Place your react-rehash workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "work-loop": {
    "scope": "javascript",
    "prefix": "wl",
    "body": [
      "let nextUnitOfWork = null;\n",
      "function workLoop(deadline) {",
      "\twhile (nextUnitOfWork && !deadline.didTimeout) {",
      "\t\tnextUnitOfWork = performUnitOfWork(",
      "\t\t\tnextUnitOfWork",
      "\t\t);",
      "\t}\n",
      "\twindow.requestIdleCallback(workLoop);",
      "}\n",
      "window.requestIdleCallback(workLoop);\n",
      "function performUnitOfWork(nextUnitOfWork) {",
      "\t// TODO add dom node",
      "\t// TODO create new fibers",
      "\t// TODO return next unit of work",
      "}"
    ],
    "description": "Empty Work Loop"
  },
  "perform-unit-of-work": {
    "scope": "javascript",
    "prefix": ["unit-of-work", "uw", "uow"],
    "body": [
      "/**",
      "* @param {Fiber} fiber",
      "* @typedef {{",
      "*   type?: string",
      "*   dom?: HTMLElement,",
      "*   parent?: Fiber,",
      "*   child?: Fiber,",
      "*   sibling?: Fiber,",
      "*   props: {",
      "*     children: Fiber[]",
      "*   }",
      "* }} Fiber",
      "*/",
      "function performUnitOfWork(fiber) {",
      "\t// TODO add dom node",
      "\t// TODO create new fibers",
      "\t// TODO return next unit of work",
      "}"
    ],
    "description": "Empty Work Loop"
  }
}
